{"mappings":"YAGAA,MAAM,gDACHC,MAAK,SAAAC,G,OAAYA,EAASC,M,IAC1BF,MAAK,SAAAE,G,OAAQC,QAAQC,IAAIF,E,IAK5BH,MAAM,6CAA8C,CAClDM,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CACnBC,MAAO,MACPH,KAAM,MACNI,OAAQ,IAEVC,QAAS,CACP,eAAgB,qCAGjBX,MAAK,SAAAC,G,OAAYA,EAASC,M,IAC1BF,MAAK,SAAAE,G,OAAQC,QAAQC,IAAIF,E,IAG5B,IAAMU,EAAU,CACdP,OAAQ,OACRM,QAAS,CACP,eAAgB,mCAElBL,KAAMC,KAAKC,UAAU,CACnBC,MAAO,OACPH,KAAM,YACNI,OAAQ,KAGZX,MAAM,6CAA8Ca,GACjDZ,MAAK,SAAAC,GACJ,IAAKA,EAASY,GACZ,MAAM,IAAIC,MAAMb,EAASc,YAE3B,OAAOd,EAASC,M,IAEjBF,MAAK,SAAAE,G,OAAQC,QAAQC,IAAIF,E,IACzBc,OAAM,SAAAC,G,OAAKd,QAAQC,IAAIa,E,IAE1B,IAAMC,EAAO,CACXC,cAAeC,SAASC,cAAc,WACtCC,QAASF,SAASC,cAAc,aAC9BE,YAAaH,SAASC,cAAc,YACpCG,aAAcJ,SAASC,cAAc,cAiBzC,SAASI,EAAkBC,GACzBA,EAAIC,iBACJ,IAAwBC,EAAAF,EAAIG,cAAcC,SAAlCrB,EAAgBmB,EAAhBnB,MAAOH,EAASsB,EAATtB,KACTyB,EAAO,CACXtB,MAAOA,EAAMuB,MACb1B,KAAMA,EAAK0B,OAEb7B,QAAQC,IAAI,iCAAiC2B,GAkB/C,SAAwBA,GACtB,IAAME,EAAU,CACd5B,OAAQ,OACRM,QAAS,CACP,eAAgB,mCAElBL,KAAMC,KAAKC,UAAUuB,IAErB,OAAOhC,MAAM,8CAA+CkC,GACvDjC,MAAK,SAAAC,GACF,IAAKA,EAASY,GACV,MAAM,IAAIC,MAAMb,EAASc,YAE7B,OAAOd,EAASC,M,IA7BxBgC,CAAeH,GAAM/B,MAAK,SAAAmC,GACtBjB,EAAKI,QAAQc,mBAAmB,YAQxC,SAA0BC,G,IAAEC,EAAFD,EAAEC,GAAI7B,EAAN4B,EAAM5B,MAAOH,EAAb+B,EAAa/B,KACrC,MAAO,gBACCiC,OADeD,EAAG,gBAEhBC,OADF9B,EAAM,qBACC8B,OAALjC,EAAK,iB,CAXoCkC,CAAiBL,G,IAE7DnB,OAAM,WACHE,EAAKM,aAAaiB,UAAY,iB,IAEjCC,SAAQ,W,OAAOxB,EAAKK,YAAYkB,UAAY,E,IA5BrDvB,EAAKC,cAAcwB,iBAAiB,SAEpC,WACEzB,EAAKK,YAAYkB,UAAa,sLAMjBrB,SAASC,cAAc,gBAC/BsB,iBAAiB,SAAUlB,E","sources":["src/js/11-crud.js"],"sourcesContent":["//CRUD\n\n//R - GET\nfetch('https://jsonplaceholder.typicode.com/posts/1')\n  .then(response => response.json())\n  .then(json => console.log(json));\n\n//C - POST\n\n// 1\nfetch('https://jsonplaceholder.typicode.com/posts', {\n  method: 'POST',\n  body: JSON.stringify({\n    title: 'foo',\n    body: 'bar',\n    userId: 1,\n  }),\n  headers: {\n    'Content-type': 'application/json; charset=UTF-8',\n  },\n})\n  .then(response => response.json())\n  .then(json => console.log(json));\n\n// 2\nconst options = {\n  method: 'POST',\n  headers: {\n    'Content-type': 'application/json; charset=UTF-8',\n  },\n  body: JSON.stringify({\n    title: 'test',\n    body: 'test test',\n    userId: 1,\n  }),\n};\nfetch('https://jsonplaceholder.typicode.com/posts', options)\n  .then(response => {\n    if (!response.ok) {\n      throw new Error(response.statusText);\n    }\n    return response.json();\n  })\n  .then(json => console.log(json))\n  .catch(e => console.log(e));\n\nconst refs = {\n  btnAddComment: document.querySelector('.js-add'),\n  listCat: document.querySelector('.js-posts'),\n    formWrapper: document.querySelector('.js-form'),\n    errorMessage: document.querySelector('.js-error'),\n  \n};\n\nrefs.btnAddComment.addEventListener('click', handlerAddPost);\n\nfunction handlerAddPost() {\n  refs.formWrapper.innerHTML = `<form action=\"submit\" class=\"js-form-add\">\n    <input type=\"text\" name=\"title\">\n    <textarea name=\"body\" cols=\"30\" rows=\"10\"></textarea>\n    <button>Add post</button>\n</form>`;\n\n  const form = document.querySelector('.js-form-add');\n  form.addEventListener('submit', handlerFormSubmit);\n}\n\nfunction handlerFormSubmit(evt) {\n  evt.preventDefault();\n  const { title, body } = evt.currentTarget.elements;\n  const data = {\n    title: title.value,\n    body: body.value,\n  };\n  console.log('ðŸš€ ~ handlerFormSubmit ~ data:', data);\n\n    addPostService(data).then(obj => {\n        refs.listCat.insertAdjacentHTML('beforeend', createPostMarkup(obj))\n    })\n        .catch(() => {\n            refs.errorMessage.innerHTML = \"Can't add posts\";\n        })\n        .finally(() => (refs.formWrapper.innerHTML = \"\"));\n}\n\nfunction createPostMarkup({ id, title, body }) {\n  return `<li data-id=\"${id}\">\n    <h2>${title}</h2>\n    <span>${body}</span>\n</li>`;\n}\n\nfunction addPostService(data) {\n  const options = {\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify(data),\n  };\n    return fetch('https://1jsonplaceholder.typicode.com/posts', options)\n        .then(response => {\n            if (!response.ok) {\n                throw new Error(response.statusText);\n            }\n            return response.json();\n        });\n}\n"],"names":["fetch","then","response","json","console","log","method","body","JSON","stringify","title","userId","headers","$8168caa4e6837368$var$options","ok","Error","statusText","catch","e","$8168caa4e6837368$var$refs","btnAddComment","document","querySelector","listCat","formWrapper","errorMessage","$8168caa4e6837368$var$handlerFormSubmit","evt","preventDefault","_elements","currentTarget","elements","data","value","options1","$8168caa4e6837368$var$addPostService","obj","insertAdjacentHTML","param","id","concat","$8168caa4e6837368$var$createPostMarkup","innerHTML","finally","addEventListener"],"version":3,"file":"11-crud.a24a0df5.js.map"}